generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  schemas    = ["public", "auth"]
}

model SpeedTest {
  id            String   @id @default(cuid())
  userId        String
  downloadSpeed Float
  uploadSpeed   Float
  ping          Float
  createdAt     DateTime @default(now())
  asn           String?
  city          String?
  country       String?
  isp           String?
  ispOrg        String?
  latitude      Float?
  longitude     Float?
  state         String?
  zip           String?
  user          User     @relation(fields: [userId], references: [id])
  complex       ApartmentComplex? @relation(fields: [complexId], references: [id])
  complexId     String?

  @@index([userId])
  @@index([city, state])
  @@index([latitude, longitude])
  @@index([isp])
  @@schema("public")
}

model ISPMetrics {
  id              String        @id
  isp             String
  avgDownload     Float
  avgUpload       Float
  avgPing         Float
  testCount       Int
  peakHourAvgDown Float?
  peakHourAvgUp   Float?
  peakHourAvgPing Float?
  offPeakAvgDown  Float?
  offPeakAvgUp    Float?
  offPeakAvgPing  Float?
  reliability     Float?
  city            String?
  state           String?
  country         String?
  updatedAt       DateTime
  ISPCoverage     ISPCoverage[]
  ISPReview       ISPReview[]
  complexIsps     ComplexISP[]

  @@unique([isp, city, state, country])
  @@index([isp])
  @@index([city, state])
  @@map("ISPMetrics")
  @@schema("public")
}

model ISPReview {
  id          String     @id
  ispMetricId String
  userId      String
  rating      Int
  comment     String?
  pros        String[]
  cons        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  helpful     Int        @default(0)
  notHelpful  Int        @default(0)
  
  // New fields for detailed ratings
  speedRating        Int
  reliabilityRating  Int
  valueRating        Int
  supportRating      Int
  installationRating Int?
  
  // Verification and moderation
  isVerified        Boolean   @default(false)
  verificationDate  DateTime?
  verificationProof String?   // URL to proof document/screenshot
  moderationStatus  String    @default("pending") // pending, approved, rejected
  moderationDate    DateTime?
  moderationReason  String?
  moderatorId       String?
  
  // Photo evidence
  photos            String[]  // Array of photo URLs
  
  // Relations
  ISPMetrics  ISPMetrics @relation(fields: [ispMetricId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
  moderator   User?      @relation("ModeratedReviews", fields: [moderatorId], references: [id])

  @@index([ispMetricId])
  @@index([userId])
  @@index([moderationStatus])
  @@map("ISPReview")
  @@schema("public")
}

model ISPCoverage {
  id             String     @id
  ispMetricId    String
  latitude       Float
  longitude      Float
  signalStrength Float
  technology     String
  maxSpeed       Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  ISPMetrics     ISPMetrics @relation(fields: [ispMetricId], references: [id])

  @@index([latitude, longitude])
  @@index([ispMetricId])
  @@map("ISPCoverage")
  @@schema("public")
}

model User {
  id              String           @id
  email           String           @unique
  name            String?
  image           String?
  password        String
  notifications   Json             @default("{\"speedTestReminders\": false, \"newReviews\": false, \"ispUpdates\": false}")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isModerator     Boolean          @default(false)
  speedTests      SpeedTest[]
  apartmentReviews ApartmentReview[]
  flaggedReviews   ApartmentReview[] @relation("FlaggedBy")
  savedComparisons SavedComparison[]
  favoriteComplexes FavoriteComplex[]
  sentMessages    Message[]        @relation("SentMessages")
  conversations   UserConversation[]
  ispReviews      ISPReview[]
  moderatedReviews ISPReview[]     @relation("ModeratedReviews")

  @@schema("public")
}

model ApartmentComplex {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  latitude    Float?
  longitude   Float?
  website     String?
  amenities   String[] // ["fiber_ready", "free_wifi", etc.]
  badges      String[] // ["wfh_friendly", "streamer_approved", "gamer_ready", etc.]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reviews     ApartmentReview[]
  speedTests  SpeedTest[]
  isps        ComplexISP[]
  favoritedBy FavoriteComplex[]
  conversations Conversation[]

  @@index([city, state])
  @@index([latitude, longitude])
  @@schema("public")
}

model ApartmentReview {
  id              String   @id @default(cuid())
  complexId       String
  userId          String
  rating          Int      // Overall rating
  internetRating  Int      // Specific to internet
  comment         String?  @db.Text
  pros            String[]
  cons            String[]
  verified        Boolean  @default(false) // For resident verification
  helpfulCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  flagged         Boolean  @default(false)
  flaggedAt       DateTime?
  flaggedBy       String?
  
  // Peak Hour Performance Metrics
  peakHourRating        Int?     // Rating during peak hours
  peakHourComment       String?  @db.Text
  peakHourStart         Int?     // Hour of day (0-23)
  peakHourEnd           Int?     // Hour of day (0-23)
  peakHourDownloadSpeed Float?   // Mbps during peak hours
  peakHourUploadSpeed   Float?   // Mbps during peak hours
  peakHourPing          Float?   // ms during peak hours
  peakHourPacketLoss    Float?   // Percentage during peak hours

  flagger         User?    @relation("FlaggedBy", fields: [flaggedBy], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  complex         ApartmentComplex @relation(fields: [complexId], references: [id])

  @@index([complexId])
  @@index([userId])
  @@index([flaggedBy])
  @@schema("public")
}

model ComplexISP {
  id          String   @id @default(cuid())
  complexId   String
  ispMetricId String
  isDefault   Boolean  @default(false)  // Is this the building's default ISP?
  coverage    Float    @default(1.0)    // Coverage score (0-1)
  speedTests  Int      @default(0)      // Number of speed tests
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  complex     ApartmentComplex @relation(fields: [complexId], references: [id])
  ispMetric   ISPMetrics      @relation(fields: [ispMetricId], references: [id])

  @@unique([complexId, ispMetricId])
  @@index([complexId])
  @@index([ispMetricId])
  @@schema("public")
}

model SavedComparison {
  id          String   @id @default(cuid())
  userId      String
  name        String
  ispIds      String[]
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@schema("public")
}

model FavoriteComplex {
  id          String   @id @default(cuid())
  userId      String
  complexId   String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  complex     ApartmentComplex @relation(fields: [complexId], references: [id])

  @@unique([userId, complexId])
  @@index([userId])
  @@index([complexId])
  @@schema("public")
}

model Conversation {
  id          String   @id @default(cuid())
  name        String?  // For group conversations
  complexId   String?  // Optional link to apartment complex
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Message[]
  participants UserConversation[]
  complex     ApartmentComplex? @relation(fields: [complexId], references: [id])

  @@index([complexId])
  @@schema("public")
}

model UserConversation {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
  @@schema("public")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId      String
  content       String       @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  sender        User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@schema("public")
}

model TipCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  tips        Tip[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Tip {
  id            String      @id @default(cuid())
  title         String
  content       String      @db.Text
  categoryId    String
  tags          String[]
  helpfulCount  Int         @default(0)
  unhelpfulCount Int        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      TipCategory @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@schema("public")
}

model FAQ {
  id            String   @id @default(cuid())
  question      String
  answer        String   @db.Text
  category      String
  tags          String[]
  helpfulCount  Int      @default(0)
  unhelpfulCount Int     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}
