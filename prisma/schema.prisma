generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
  schemas    = ["auth", "public"]
}

model SpeedTest {
  id            String   @id @default(cuid())
  userId        String
  downloadSpeed Float
  uploadSpeed   Float
  ping          Float
  createdAt     DateTime @default(now())
  asn           String?
  city          String?
  country       String?
  isp           String?
  ispOrg        String?
  latitude      Float?
  longitude     Float?
  state         String?
  zip           String?
  user          User     @relation(fields: [userId], references: [id])
  complex       ApartmentComplex? @relation(fields: [complexId], references: [id])
  complexId     String?

  @@index([userId])
  @@index([city, state])
  @@index([latitude, longitude])
  @@index([isp])
  @@schema("public")
}

model ISPMetrics {
  id              String        @id
  isp             String
  avgDownload     Float
  avgUpload       Float
  avgPing         Float
  testCount       Int
  peakHourAvgDown Float?
  peakHourAvgUp   Float?
  peakHourAvgPing Float?
  offPeakAvgDown  Float?
  offPeakAvgUp    Float?
  offPeakAvgPing  Float?
  reliability     Float?
  city            String?
  state           String?
  country         String?
  updatedAt       DateTime
  ISPCoverage     ISPCoverage[]
  ISPReview       ISPReview[]
  complexIsps     ComplexISP[]

  @@unique([isp, city, state, country])
  @@index([isp])
  @@index([city, state])
  @@map("ISPMetrics")
  @@schema("public")
}

model ISPReview {
  id          String     @id
  ispMetricId String
  userId      String
  rating      Int
  comment     String?
  pros        String[]
  cons        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  helpful     Int        @default(0)
  notHelpful  Int        @default(0)
  ISPMetrics  ISPMetrics @relation(fields: [ispMetricId], references: [id])
  User        User       @relation(fields: [userId], references: [id])

  @@index([ispMetricId])
  @@index([userId])
  @@map("ISPReview")
  @@schema("public")
}

model ISPCoverage {
  id             String     @id
  ispMetricId    String
  latitude       Float
  longitude      Float
  signalStrength Float
  technology     String
  maxSpeed       Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  ISPMetrics     ISPMetrics @relation(fields: [ispMetricId], references: [id])

  @@index([latitude, longitude])
  @@index([ispMetricId])
  @@map("ISPCoverage")
  @@schema("public")
}

model User {
  id              String           @id
  email           String           @unique
  name            String?
  password        String
  createdAt       DateTime         @default(now())
  ISPReview       ISPReview[]
  speedTests      SpeedTest[]
  apartmentReviews ApartmentReview[]

  @@schema("public")
}

model ApartmentComplex {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  latitude    Float?
  longitude   Float?
  website     String?
  amenities   String[] // ["fiber_ready", "free_wifi", etc.]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reviews     ApartmentReview[]
  speedTests  SpeedTest[]
  isps        ComplexISP[]

  @@index([city, state])
  @@index([latitude, longitude])
  @@schema("public")
}

model ApartmentReview {
  id              String   @id @default(cuid())
  complexId       String
  userId          String
  rating          Int      // Overall rating
  internetRating  Int      // Specific to internet
  comment         String?  @db.Text
  pros            String[]
  cons            String[]
  verified        Boolean  @default(false) // For resident verification
  helpfulCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  complex         ApartmentComplex @relation(fields: [complexId], references: [id])

  @@index([complexId])
  @@index([userId])
  @@schema("public")
}

model ComplexISP {
  id          String   @id @default(cuid())
  complexId   String
  ispMetricId String
  isDefault   Boolean  @default(false)  // Is this the building's default ISP?
  coverage    Float    @default(1.0)    // Coverage score (0-1)
  speedTests  Int      @default(0)      // Number of speed tests
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  complex     ApartmentComplex @relation(fields: [complexId], references: [id])
  ispMetric   ISPMetrics      @relation(fields: [ispMetricId], references: [id])

  @@unique([complexId, ispMetricId])
  @@index([complexId])
  @@index([ispMetricId])
  @@schema("public")
}
